import pygame
import sys
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Curlew Journey - Scene Mode")

# Colors
BG_COLOR = (226, 199, 140)  # Parchment paper color
BTN_COLOR = (139, 115, 85)  # Normal button
HOVER_COLOR = (100, 80, 60)  # Hover button
TEXT_COLOR = (255, 255, 255)
DARK_OVERLAY = pygame.Surface((WIDTH, HEIGHT))
DARK_OVERLAY.set_alpha(0)
DARK_OVERLAY.fill((0, 0, 0))  # Used for fade-dark effect

# Fonts and sounds
font = pygame.font.SysFont("Papyrus", 22, bold=True)
clickSound = pygame.mixer.Sound("click.wav")

# Button class (simulate onMouseMove, onMousePress, onMouseRelease)
class Button:
    def __init__(self, label, x, y, w, h):
        self.label = label
        self.rect = pygame.Rect(x, y, w, h)
        self.hovered = False
        self.clicked = False

    def draw(self):
        color = HOVER_COLOR if self.hovered else BTN_COLOR
        displayRect = self.rect.inflate(10, 5) if self.clicked else self.rect
        pygame.draw.rect(screen, color, displayRect, border_radius=6)
        pygame.draw.rect(screen, (0, 0, 0), displayRect, 2, border_radius=6)
        text = font.render(self.label, True, TEXT_COLOR)
        textRect = text.get_rect(center=displayRect.center)
        screen.blit(text, textRect)

# Center item (e.g., binoculars)
class Item:
    def __init__(self, x, y, r):
        self.x, self.y = x, y
        self.r = r
        self.zooming = False
        self.zoomR = r  # current radius for animation

    def draw(self):
        pygame.draw.circle(screen, (70, 70, 70), (self.x, self.y), self.zoomR)
        pygame.draw.circle(screen, (0, 0, 0), (self.x, self.y), self.zoomR, 2)

    def update(self):
        # Simulate animation over time
        if self.zooming and self.zoomR < 200:
            self.zoomR += 3
            alpha = min(150, self.zoomR - 50)
            DARK_OVERLAY.set_alpha(alpha)

    def isClicked(self, pos):
        x, y = pos
        return (x - self.x)**2 + (y - self.y)**2 <= self.zoomR**2

# Create buttons and interactive object
buttons = [
    Button("Observe", 80, 500, 150, 50),
    Button("Approach", 300, 500, 150, 50),
    Button("Leave", 520, 500, 150, 50)
]
item = Item(WIDTH // 2, 250, 40)

# Pygame clock (for consistent frame rate)
clock = pygame.time.Clock()

# === MAIN GAME LOOP ===
while True:
    screen.fill(BG_COLOR)
    mousePos = pygame.mouse.get_pos()

    # Event loop (like checking onMouseMove, onMousePress, etc.)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        elif event.type == pygame.MOUSEMOTION:
            # Simulates onMouseMove
            for button in buttons:
                button.hovered = button.rect.collidepoint(mousePos)

        elif event.type == pygame.MOUSEBUTTONDOWN:
            # Simulates onMousePress
            for button in buttons:
                if button.rect.collidepoint(mousePos):
                    button.clicked = True
                    clickSound.play()
            if item.isClicked(mousePos):
                item.zooming = True
                clickSound.play()

        elif event.type == pygame.MOUSEBUTTONUP:
            # Simulates onMouseRelease
            for button in buttons:
                button.clicked = False

    # Update object animation
    item.update()

    # Draw scene elements
    item.draw()
    for button in buttons:
        button.draw()
    if item.zooming:
        screen.blit(DARK_OVERLAY, (0, 0))

    pygame.display.update()
    clock.tick(60)
